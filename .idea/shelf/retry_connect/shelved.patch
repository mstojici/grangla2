Index: app/src/main/java/com/boardgame/miljac/grangla/BluetoothPlayerGamePlayActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.boardgame.miljac.grangla;\r\n\r\nimport static android.Manifest.*;\r\nimport static com.boardgame.miljac.grangla.music.MusicHelpers.getRandomInRange;\r\nimport static com.boardgame.miljac.grangla.music.MusicHelpers.normalizeIndex;\r\nimport static com.boardgame.miljac.grangla.music.MusicHelpers.oneMoreInTheEnd;\r\nimport static com.boardgame.miljac.grangla.music.MusicHelpers.onlyTrumpetEnd;\r\nimport static com.boardgame.miljac.grangla.music.MusicHelpers.randomAround;\r\nimport static com.boardgame.miljac.grangla.music.MusicHelpers.turnSomeInstrumentOn;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.bluetooth.BluetoothAdapter;\r\nimport android.bluetooth.BluetoothServerSocket;\r\nimport android.bluetooth.BluetoothSocket;\r\nimport android.content.BroadcastReceiver;\r\nimport android.content.Context;\r\nimport android.content.DialogInterface;\r\nimport android.content.Intent;\r\nimport android.content.IntentFilter;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.Color;\r\nimport android.graphics.drawable.ColorDrawable;\r\nimport android.net.wifi.WpsInfo;\r\nimport android.net.wifi.p2p.WifiP2pConfig;\r\nimport android.net.wifi.p2p.WifiP2pDevice;\r\nimport android.net.wifi.p2p.WifiP2pInfo;\r\nimport android.net.wifi.p2p.WifiP2pManager;\r\nimport android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceInfo;\r\nimport android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceRequest;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.support.v4.graphics.ColorUtils;\r\nimport android.support.v7.app.AlertDialog;\r\nimport android.support.v7.app.AppCompatActivity;\r\nimport android.text.InputFilter;\r\nimport android.text.InputType;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.view.Window;\r\nimport android.view.WindowManager;\r\nimport android.widget.CompoundButton;\r\nimport android.widget.EditText;\r\nimport android.widget.ImageButton;\r\nimport android.widget.ProgressBar;\r\nimport android.widget.TextView;\r\nimport android.widget.ToggleButton;\r\n\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.net.InetSocketAddress;\r\nimport java.net.ServerSocket;\r\nimport java.net.Socket;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.Timer;\r\nimport java.util.TimerTask;\r\nimport java.util.UUID;\r\nimport java.util.concurrent.CopyOnWriteArrayList;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.util.concurrent.locks.Lock;\r\nimport java.util.concurrent.locks.LockSupport;\r\nimport java.util.concurrent.locks.ReentrantReadWriteLock;\r\n\r\npublic class BluetoothPlayerGamePlayActivity extends AppCompatActivity implements TableFragment.OnFieldSelectedListener {\r\n\r\n    private int currentApiVersion;\r\n    private TableView tableView;\r\n    private OtherPlayer otherPlayer = new OtherPlayer();\r\n    private TableViewRefreshing tableViewRefreshing = new TableViewRefreshing();\r\n    private UIPut uIPut = new UIPut();\r\n    Table table = new Table(3);\r\n    private TableFragment tableFragment;\r\n    public Boolean gameDone = false;\r\n    private Boolean gamePaused = false;\r\n    private Boolean muted = false;\r\n    private boolean firstTimeAnimatedProgress = true;\r\n    private EndDialog endDialog;\r\n\r\n    private Coordinates c;\r\n    Coordinates lastMoveO;\r\n    Coordinates lastMoveX;\r\n    double result = 50;\r\n    public long waitingTimeCircle = 3000;\r\n    long waitingMomentCircle = 0;\r\n    boolean allowCircle = true;\r\n    public long waitingTimeCross = 3000;\r\n    long waitingMomentCross = 0;\r\n    private long gameStartTime, currentTime, lastEventTime, pausedTime;\r\n    boolean allowCross = true;\r\n    private int level;\r\n    private int player1Image;\r\n    private int player2Image;\r\n    private int player1Color;\r\n    private int player2Color;\r\n    private int player1ColorDesaturated;\r\n    private int player2ColorDesaturated;\r\n    private SharedPreferences mPrefs;\r\n    boolean startCircleTime = false;\r\n    boolean startCrossTime = false;\r\n    private String levelString;\r\n\r\n    private boolean win = false;\r\n    private boolean lose = false;\r\n    private boolean isHighScore = false;\r\n\r\n    int[][] spaceHeading = new int[6][6];\r\n    private HighScoresHelper.HttpGetScoresAsyncTask getScoresTask;\r\n\r\n    ToggleButton soundToggle;\r\n    ImageButton imageButton;\r\n    ResultBarAnimation animResult;\r\n    boolean canceled = false;\r\n\r\n    private final ReentrantReadWriteLock rwl = new ReentrantReadWriteLock();\r\n    private final Lock r = rwl.readLock();\r\n    ProgressBar resultBar, resultBar2, circleBar, crossBar;\r\n    TextView textClock;\r\n\r\n    Thread otherPlayerThread;\r\n    Thread tableViewRefreshingThread;\r\n    Thread uIPutThread;\r\n\r\n    CopyOnWriteArrayList movesO = new CopyOnWriteArrayList();\r\n    CopyOnWriteArrayList movesX = new CopyOnWriteArrayList();\r\n\r\n    Thread musicPlayerThread;\r\n    Thread proxyThread;\r\n    MusicPlayer musicPlayer;\r\n\r\n    // Intent request codes\r\n    private static final int REQUEST_CONNECT_DEVICE_SECURE = 1;\r\n    private static final int REQUEST_CONNECT_DEVICE_INSECURE = 2;\r\n    private static final int REQUEST_ENABLE_BT = 3;\r\n    private BluetoothAdapter mBluetoothAdapter = null;\r\n    private BluetoothSocket granglaSocket;\r\n    AcceptThread acceptThread;\r\n    boolean server;\r\n    UUID granglaUuid = UUID.fromString(\"756bd856-5dea-4fc7-a53b-2c0c1159746a\");\r\n    GranglaBluetoothService bluetoothService;\r\n\r\n    boolean gameStarted = false;\r\n    boolean gameInited = false;\r\n    int stateSent = 0;\r\n    public boolean gameEndSignal = false;\r\n\r\n    private final int PERMISSION_REQUEST_CODE = 1000;\r\n\r\n    private final IntentFilter intentFilter = new IntentFilter();\r\n    WifiP2pManager.Channel channel;\r\n    WifiP2pManager manager;\r\n    boolean connected = false;\r\n    final Handler handler = new Handler();\r\n\r\n    WifiP2pManager.DnsSdServiceResponseListener dnsSdResponseListener =  new WifiP2pManager.DnsSdServiceResponseListener() {\r\n        @Override\r\n        public void onDnsSdServiceAvailable(String s, String s1, WifiP2pDevice wifiP2pDevice) {\r\n            Log.d(\"granglawifi\", \"onDnsSdServiceAvailable\");\r\n            /*Log.d(\"granglawifi\", s);\r\n            Log.d(\"granglawifi\", s1);\r\n            Log.d(\"granglawifi\", wifiP2pDevice.toString());*/\r\n            //serviceFound = true;\r\n        }\r\n    };\r\n\r\n    WifiP2pManager.DnsSdTxtRecordListener dnsSdTxtResponseListener =  new WifiP2pManager.DnsSdTxtRecordListener() {\r\n        @Override\r\n        public void onDnsSdTxtRecordAvailable(String s, Map<String, String> map, WifiP2pDevice wifiP2pDevice) {\r\n            Log.d(\"granglawifi\", \"onDnsSdTxtRecordAvailable\");\r\n\r\n            if(!connected) {\r\n                Log.d(\"granglawifi\", s);\r\n                for (Map.Entry<String, String> entry : map.entrySet()) {\r\n                    Log.d(\"granglawifi\", entry.getKey() + \" : \" + entry.getValue());\r\n                }\r\n                Log.d(\"granglawifi\", wifiP2pDevice.toString());\r\n                //serviceFound = true;\r\n\r\n\r\n                manager.cancelConnect(channel, new WifiP2pManager.ActionListener() {\r\n                    @Override\r\n                    public void onSuccess() {\r\n                        Log.d(\"granglawifi\", \"connect canceled\");\r\n                        canceled = true;\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFailure(int i) {\r\n                        Log.d(\"granglawifi\", \"connect cancel failed \" + i);\r\n                        canceled = false;\r\n                    }\r\n                });\r\n\r\n                /*if(!canceled){\r\n                    return;\r\n                }*/\r\n\r\n                WifiP2pConfig config = new WifiP2pConfig();\r\n                config.deviceAddress = wifiP2pDevice.deviceAddress;\r\n                config.wps.setup = WpsInfo.PBC;\r\n\r\n\r\n                manager.connect(channel, config, new WifiP2pManager.ActionListener() {\r\n\r\n                    @Override\r\n                    public void onSuccess() {\r\n                        Log.d(\"granglawifi\", \"connected to \" +\r\n                                wifiP2pDevice.deviceAddress == null ? \"\" : wifiP2pDevice.deviceAddress);\r\n                            /*manager.clearLocalServices(channel, new WifiP2pManager.ActionListener() {\r\n                                @Override\r\n                                public void onSuccess() {\r\n                                    Log.d(\"granglawifi\", \"local servoces cleared\");\r\n                                }\r\n\r\n                                @Override\r\n                                public void onFailure(int i) {\r\n\r\n                                }\r\n                            });*/\r\n\r\n                        manager.requestConnectionInfo(channel, new WifiP2pManager.ConnectionInfoListener() {\r\n                            @Override\r\n                            public void onConnectionInfoAvailable(WifiP2pInfo info) {\r\n                                Log.d(\"granglawifi\", \"onConnectionInfoAvailable \" + info.toString());\r\n                                // Connection info available in `info` object\r\n                                if (/*info.groupFormed && info.isGroupOwner*/\r\n                                        info.groupOwnerAddress == null) {\r\n                                    new Thread() {\r\n                                        @Override\r\n                                        public void run() {\r\n                                            if(connected) return;\r\n                                            // This device is the group owner, so it listens for incoming connections\r\n                                            try {\r\n                                                Log.d(\"granglawifi\", \"connecting socket as server....\");\r\n                                                ServerSocket serverSocket = new ServerSocket(6000);\r\n                                                Socket socket = serverSocket.accept();\r\n                                                connected = true;\r\n                            /*OutputStream outputStream = socket.getOutputStream();\r\n                            outputStream.write(\"Hello from Group Owner\".getBytes());\r\n                            outputStream.close();\r\n                            socket.close();\r\n                            serverSocket.close();*/\r\n                                                Log.d(\"granglawifi\", \"connected socket as server\");\r\n                                            } catch (IOException e) {\r\n                                                e.printStackTrace();\r\n                                                connected = false;\r\n                                            }\r\n                                        }\r\n                                    }.start();\r\n                                } else /*if (info.groupFormed)*/ {\r\n                                    // This device is a group member, so it connects to the group owner\r\n                                    new Thread() {\r\n                                        @Override\r\n                                        public void run() {\r\n                                            try {\r\n                                                if(connected) return;\r\n                                                Log.d(\"granglawifi\", \"connecting socket as client..\");\r\n                                                Socket socket = new Socket();\r\n                                                socket.connect((new InetSocketAddress(info.groupOwnerAddress, 6000)));\r\n                                                connected = true;\r\n                                                InputStream inputStream = socket.getInputStream();\r\n                            /*byte[] message = new byte[1024];\r\n                            int length = inputStream.read(message);\r\n                            Log.d(\"Message\", new String(message, 0, length));\r\n                            inputStream.close();\r\n                            socket.close();*/\r\n                                                Log.d(\"granglawifi\", \"connected socket as client\");\r\n\r\n                                            } catch (IOException e) {\r\n                                                e.printStackTrace();\r\n                                                connected = false;\r\n                                            }\r\n                                        }\r\n                                    }.start();\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFailure(int reason) {\r\n                        Log.d(\"granglawifi\", \" failing to connect to \" + wifiP2pDevice.deviceAddress);\r\n                        connected = false;\r\n                    }\r\n                });\r\n            }\r\n\r\n        }\r\n    };\r\n    final Runnable discoveryRunnable = new Runnable() {\r\n        @Override\r\n        public void run() {\r\n\r\n\r\n            manager.clearLocalServices(channel, new WifiP2pManager.ActionListener() {\r\n                @Override\r\n                public void onSuccess() {\r\n                    HashMap<String, String> record = new HashMap<>();\r\n                    record.put(\"name\", \"grangla\");\r\n                    WifiP2pDnsSdServiceInfo serviceInfo = WifiP2pDnsSdServiceInfo.newInstance(\"grangla\", \"grangla\", record);\r\n                    manager.addLocalService(channel, serviceInfo, new WifiP2pManager.ActionListener() {\r\n                        @Override\r\n                        public void onSuccess() {\r\n                            manager.setDnsSdResponseListeners(channel, dnsSdResponseListener, dnsSdTxtResponseListener);\r\n                            manager.clearServiceRequests(channel, new WifiP2pManager.ActionListener() {\r\n                                @Override\r\n                                public void onSuccess() {\r\n                                    manager.addServiceRequest(channel, WifiP2pDnsSdServiceRequest.newInstance(), new WifiP2pManager.ActionListener() {\r\n                                        @Override\r\n                                        public void onSuccess() {\r\n                                            manager.discoverPeers(channel, new WifiP2pManager.ActionListener() {\r\n                                                @Override\r\n                                                public void onSuccess() {\r\n                                                    manager.discoverServices(channel, new WifiP2pManager.ActionListener() {\r\n                                                        @Override\r\n                                                        public void onSuccess() {\r\n                                                            // this is my recursive discovery approach\r\n                                                            handler.postDelayed(discoveryRunnable, (long) randomAround(7 * 1000, 2*1000));\r\n                                                        }\r\n\r\n                                                        @Override\r\n                                                        public void onFailure(int code) {\r\n                                                            Log.d(\"granglawifi\", \"failure5 \" + code);\r\n                                                            handler.postDelayed(discoveryRunnable, 1000);\r\n                                                        }\r\n                                                    });\r\n                                                }\r\n\r\n                                                @Override\r\n                                                public void onFailure(int code) {\r\n                                                    Log.d(\"granglawifi\", \"failure6 \" + code);\r\n                                                    handler.postDelayed(discoveryRunnable, 1000);\r\n                                                }\r\n                                            });\r\n                                        }\r\n\r\n                                        @Override\r\n                                        public void onFailure(int code) {\r\n                                            Log.d(\"granglawifi\", \"failure7 \" + code);\r\n                                            handler.postDelayed(discoveryRunnable, 1000);\r\n                                        }\r\n                                    });\r\n                                }\r\n\r\n                                @Override\r\n                                public void onFailure(int code) {\r\n                                    Log.d(\"granglawifi\", \"failure8 \" + code);\r\n                                    handler.postDelayed(discoveryRunnable, 1000);\r\n                                }\r\n                            });\r\n                        }\r\n\r\n                        @Override\r\n                        public void onFailure(int code) {\r\n                            Log.d(\"granglawifi\", \"failure9 \" + code);\r\n                            handler.postDelayed(discoveryRunnable, 1000);\r\n                        }\r\n                    });\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(int code) {\r\n                    Log.d(\"granglawifi\", \"failure0 \" + code);\r\n                    handler.postDelayed(discoveryRunnable, 1000);\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    private class TableViewRefreshing implements Runnable {\r\n        public void run() {\r\n            LockSupport.parkNanos(70_000_000);\r\n            while (!gameDone) {\r\n                if (gamePaused) continue;\r\n\r\n                uIPutThread = new Thread(uIPut);\r\n                runOnUiThread(uIPutThread);\r\n                if(server) {\r\n                    if(stateSent <= 0) {\r\n                        bluetoothService.sendTableState();\r\n                    } else {\r\n                        stateSent--;\r\n                    }\r\n                }\r\n                LockSupport.parkNanos(70_000_000);\r\n            }\r\n        }\r\n    }\r\n\r\n    private final BroadcastReceiver receiver = new BroadcastReceiver() {\r\n        @SuppressLint(\"MissingPermission\")\r\n        public void onReceive(Context context, Intent intent) {\r\n            String action = intent.getAction();\r\n            Log.d(\"granglawifi\",\"action received: \" + intent.toString());\r\n            if (WifiP2pManager.WIFI_P2P_STATE_CHANGED_ACTION.equals(action)) {\r\n                // Determine if Wi-Fi Direct mode is enabled or not, alert\r\n                // the Activity.\r\n                /*int state = intent.getIntExtra(WifiP2pManager.EXTRA_WIFI_STATE, -1);\r\n                if (state == WifiP2pManager.WIFI_P2P_STATE_ENABLED) {\r\n                    activity.setIsWifiP2pEnabled(true);\r\n                } else {\r\n                    activity.setIsWifiP2pEnabled(false);\r\n                }*/\r\n            } else if (WifiP2pManager.WIFI_P2P_CONNECTION_CHANGED_ACTION.equals(action)) {\r\n\r\n                // Connection state changed! We should probably do something about\r\n                // that.\r\n\r\n            } else if (WifiP2pManager.WIFI_P2P_PEERS_CHANGED_ACTION.equals(action)) {\r\n                /*WifiP2pManager.PeerListListener myPeerListListener = new WifiP2pManager.PeerListListener(){\r\n\r\n                    @Override\r\n                    public void onPeersAvailable(WifiP2pDeviceList wifiP2pDeviceList) {\r\n                        Log.d(\"granglawifi\", wifiP2pDeviceList.toString());\r\n                    }\r\n                };\r\n                // request available peers from the wifi p2p manager. This is an\r\n                // asynchronous call and the calling activity is notified with a\r\n                // callback on PeerListListener.onPeersAvailable()\r\n                if (manager != null) {\r\n                    manager.requestPeers(channel, myPeerListListener);\r\n                }*/\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    @SuppressLint(\"MissingPermission\")\r\n    @Override\r\n    public void onStart() {\r\n        super.onStart();\r\n\r\n        Intent intent = getIntent();\r\n        level = intent.getIntExtra(\"mrm_LEVEL\", 50);\r\n\r\n        setPlayerImages(intent);\r\n\r\n        setVisualElements();\r\n        textClock.setText(\"Connecting bluetooth...\");\r\n        textClock.setTextColor(Color.WHITE);\r\n\r\n        registerReceiver(receiver, intentFilter);\r\n\r\n        handler.post(discoveryRunnable);\r\n\r\n    }\r\n\r\n    public void startGame(){\r\n        if(gameInited) {\r\n            setResult(55);\r\n            finish();\r\n            return;\r\n        }\r\n\r\n        gameInited = true;\r\n\r\n        gameStartTime = System.currentTimeMillis();\r\n        lastEventTime = gameStartTime;\r\n        /*otherPlayerThread = new Thread(otherPlayer);\r\n        otherPlayerThread.start();*/\r\n\r\n        table.server = server;\r\n\r\n        //bluetoothService = new GranglaBluetoothService(granglaSocket, this);\r\n\r\n        tableViewRefreshingThread = new Thread(tableViewRefreshing);\r\n        tableViewRefreshingThread.start();\r\n\r\n\r\n        musicPlayer = new MusicPlayer();\r\n        musicPlayer.server = server;\r\n        musicPlayer.bluetoothService = bluetoothService;\r\n\r\n        ThinMidiBluetoothProxy proxy = new ThinMidiBluetoothProxy(gameStartTime, musicPlayer.midiDriver, musicPlayer.bluetoothService);\r\n        bluetoothService.proxy = proxy;\r\n\r\n        if(muted){\r\n            musicPlayer.silence();\r\n        }\r\n\r\n        proxyThread = new Thread(bluetoothService.proxy);\r\n        proxyThread.start();\r\n\r\n        musicPlayerThread = new Thread(musicPlayer);\r\n        musicPlayer.setNoteDuration((long) (TableConfig.NOTE_DURATION_FACTOR * waitingTimeCross));\r\n        musicPlayerThread.start();\r\n\r\n        if (gamePaused) gameStartTime += System.currentTimeMillis() - pausedTime;\r\n        gamePaused = false;\r\n        gameStarted = true;\r\n    }\r\n\r\n\r\n    /*public void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n        switch (requestCode) {\r\n            case REQUEST_ENABLE_BT:\r\n                // When the request to enable Bluetooth returns\r\n                if (resultCode == Activity.RESULT_OK) {\r\n                    // Bluetooth is now enabled, so set up a chat session\r\n                    //setupChat();\r\n                } else {\r\n                    // User did not enable Bluetooth or an error occurred\r\n                    Log.d(\"grangla\", \"BT not enabled\");\r\n                    this.finish();\r\n                }\r\n                break;\r\n        }\r\n    }*/\r\n\r\n    private class AcceptThread extends Thread {\r\n        private BluetoothServerSocket mmServerSocket = null;\r\n\r\n        @SuppressLint(\"MissingPermission\")\r\n        public AcceptThread() {\r\n            BluetoothServerSocket tmp = null;\r\n            try {\r\n                tmp = mBluetoothAdapter.listenUsingInsecureRfcommWithServiceRecord(\"grangla\", granglaUuid);\r\n            } catch (IOException e) {\r\n                Log.e(\"grangladevice\", \"Socket's listen() method failed\", e);\r\n                finish();\r\n                return;\r\n            }\r\n            mmServerSocket = tmp;\r\n            this.start();\r\n        }\r\n\r\n        @SuppressLint(\"MissingPermission\")\r\n        public void run() {\r\n            BluetoothSocket socket = null;\r\n            // Keep listening until exception occurs or a socket is returned.\r\n            while (granglaSocket == null) {\r\n                try {\r\n                    socket = mmServerSocket.accept(30000);\r\n                } catch (IOException e) {\r\n                    Log.e(\"grangladevice\", \"Socket's accept() method failed\", e);\r\n                    if(granglaSocket == null) {\r\n                        setResult(55);\r\n                        finish();\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                if(granglaSocket != null){\r\n                    try {\r\n                        mmServerSocket.close();\r\n                    } catch (IOException e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                    break;\r\n                }\r\n                if (socket != null) {\r\n                    if(granglaSocket == null) {\r\n                        granglaSocket = socket;\r\n\r\n                        new Timer().schedule(new TimerTask() {\r\n                            @Override\r\n                            public void run() {\r\n                                server = true;\r\n                                startGame();\r\n                            }\r\n                        }, 1000);\r\n\r\n                        unregisterReceiver(receiver);\r\n                        mBluetoothAdapter.cancelDiscovery();\r\n                        Log.d(\"grangladevice\", \"server connected!\");\r\n                    } else {\r\n                        try {\r\n                            socket.close();\r\n                        } catch (IOException e) {\r\n                            //e.printStackTrace();\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Closes the connect socket and causes the thread to finish.\r\n        public void cancel() {\r\n            try {\r\n                mmServerSocket.close();\r\n            } catch (IOException e) {\r\n                Log.e(\"grangladevice\", \"Could not close the connect socket\", e);\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        super.onResume();\r\n        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\r\n    }\r\n\r\n    @Override\r\n    public void onPause() {\r\n        super.onPause();\r\n        getWindow().clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\r\n        //unregisterReceiver(receiver);\r\n        //finish();\r\n    }\r\n\r\n    private void saveSharedPreferences() {\r\n        if (mPrefs == null) {\r\n            mPrefs = getSharedPreferences(\"mrm\", MODE_PRIVATE);\r\n        }\r\n        SharedPreferences.Editor ed = mPrefs.edit();\r\n        ed.putBoolean(\"mrm_SOUND\", soundToggle.isChecked());\r\n\r\n        ed.commit();\r\n    }\r\n\r\n    @Override\r\n    public void onSaveInstanceState(Bundle outState) {\r\n        saveSharedPreferences();\r\n        super.onSaveInstanceState(outState);\r\n    }\r\n\r\n    @Override\r\n    public void onRestoreInstanceState(Bundle inState) {\r\n        super.onRestoreInstanceState(inState);\r\n    }\r\n\r\n\r\n    private void setPlayerImages(Intent intent) {\r\n        player1Image = intent.getIntExtra(\"PLAYER1_IMG\", R.drawable.pin39);\r\n        player2Image = intent.getIntExtra(\"PLAYER2_IMG\", R.drawable.pin40);\r\n\r\n\r\n        this.table = new Table(level);\r\n\r\n        if (player1Image == R.drawable.pin39) {\r\n            player1Color = TableConfig.OKO_COLOR;\r\n            player1ColorDesaturated = TableConfig.OKO_COLOR_DESATURATED;\r\n        }\r\n        if (player1Image == R.drawable.pin40) {\r\n            player1Color = TableConfig.GUMB_COLOR;\r\n            player1ColorDesaturated = TableConfig.GUMB_COLOR_DESATURATED;\r\n        }\r\n        if (player1Image == R.drawable.pin42) {\r\n            player1Color = TableConfig.DJETELINA_COLOR;\r\n            player1ColorDesaturated = TableConfig.DJETELINA_COLOR_DESATURATED;\r\n        }\r\n        if (player1Image == R.drawable.pin43) {\r\n            player1Color = TableConfig.ZVIJEZDA_COLOR;\r\n            player1ColorDesaturated = TableConfig.ZVIJEZDA_COLOR_DESATURATED;\r\n        }\r\n\r\n        if (player2Image == R.drawable.pin39) {\r\n            player2Color = TableConfig.OKO_COLOR;\r\n            player2ColorDesaturated = TableConfig.OKO_COLOR_DESATURATED;\r\n        }\r\n        if (player2Image == R.drawable.pin40) {\r\n            player2Color = TableConfig.GUMB_COLOR;\r\n            player2ColorDesaturated = TableConfig.GUMB_COLOR_DESATURATED;\r\n        }\r\n        if (player2Image == R.drawable.pin42) {\r\n            player2Color = TableConfig.DJETELINA_COLOR;\r\n            player2ColorDesaturated = TableConfig.DJETELINA_COLOR_DESATURATED;\r\n        }\r\n        if (player2Image == R.drawable.pin43) {\r\n            player2Color = TableConfig.ZVIJEZDA_COLOR;\r\n            player2ColorDesaturated = TableConfig.ZVIJEZDA_COLOR_DESATURATED;\r\n        }\r\n    }\r\n\r\n    private void setVisualElements() {\r\n        textClock = (TextView) findViewById(R.id.text_clock);\r\n        textClock.setShadowLayer(2, 0, 0, Color.WHITE);\r\n\r\n        resultBar = (ProgressBar) findViewById(R.id.result_bar);\r\n        resultBar.setProgress(50);\r\n        resultBar.getProgressDrawable().setColorFilter(player2Color,\r\n                android.graphics.PorterDuff.Mode.SRC_IN);\r\n        resultBar2 = (ProgressBar) findViewById(R.id.result_bar2);\r\n        resultBar2.setProgress(50);\r\n        resultBar2.getProgressDrawable().setColorFilter(player1Color,\r\n                android.graphics.PorterDuff.Mode.SRC_IN);\r\n\r\n\r\n        circleBar = (ProgressBar) findViewById(R.id.circle_time_bar);\r\n        circleBar.setProgress(100);\r\n        circleBar.invalidate();\r\n        circleBar.getProgressDrawable().setColorFilter(\r\n                player1Color & 0xA0FFFFFF,\r\n                android.graphics.PorterDuff.Mode.SRC_IN);\r\n        crossBar = (ProgressBar) findViewById(R.id.cross_time_bar);\r\n        crossBar.setProgress(100);\r\n        crossBar.invalidate();\r\n        crossBar.getProgressDrawable().setColorFilter(\r\n                player2Color & 0xA0FFFFFF,\r\n                android.graphics.PorterDuff.Mode.SRC_IN);\r\n\r\n        tableFragment = (TableFragment)\r\n                getSupportFragmentManager().findFragmentById(R.id.Table);\r\n        tableView = tableFragment.tableView;\r\n\r\n\r\n        if (mPrefs == null) {\r\n            mPrefs = getSharedPreferences(\"mrm\", MODE_PRIVATE);\r\n        }\r\n\r\n        soundToggle = (ToggleButton) findViewById(R.id.toggle_sound_button);\r\n\r\n\r\n        if ((mPrefs.getBoolean(\"mrm_SOUND\", true))) {\r\n            soundToggle.setChecked(true);\r\n        } else {\r\n            if (musicPlayer != null) {\r\n                musicPlayer.mute();\r\n            }\r\n            musicPlayer = new MusicPlayer();\r\n            musicPlayerThread = new Thread(musicPlayer);\r\n            musicPlayer.setNoteDuration((long) (TableConfig.NOTE_DURATION_FACTOR * waitingTimeCross));\r\n            muted = true;\r\n        }\r\n\r\n        soundToggle.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {\r\n            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {\r\n                if(!gameStarted) {\r\n                    muted = !isChecked;\r\n                    return;\r\n                }\r\n                if (isChecked) {\r\n                    musicPlayer.unsilence();\r\n                    muted = false;\r\n                } else {\r\n                    musicPlayer.silence();\r\n                    muted = true;\r\n                }\r\n            }\r\n        });\r\n\r\n\r\n        imageButton = (ImageButton) findViewById(R.id.discard_button);\r\n\r\n        imageButton.setOnClickListener(new View.OnClickListener() {\r\n\r\n            @Override\r\n            public void onClick(View arg0) {\r\n                saveSharedPreferences();\r\n                if (bluetoothService != null) {\r\n                    bluetoothService.sendExit();\r\n                }\r\n                finish();\r\n\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n\r\n        this.requestPermissions(new String[]{permission.NEARBY_WIFI_DEVICES,\r\n                permission.ACCESS_COARSE_LOCATION,\r\n                permission.ACCESS_FINE_LOCATION,\r\n                permission.ACCESS_WIFI_STATE,\r\n                permission.CHANGE_WIFI_STATE,\r\n                permission.INTERNET\r\n        }, PERMISSION_REQUEST_CODE);\r\n\r\n        currentApiVersion = Build.VERSION.SDK_INT;\r\n        setContentView(R.layout.activity_game_play);\r\n\r\n        // Indicates a change in the Wi-Fi Direct status.\r\n        intentFilter.addAction(WifiP2pManager.WIFI_P2P_STATE_CHANGED_ACTION);\r\n\r\n        // Indicates a change in the list of available peers.\r\n        intentFilter.addAction(WifiP2pManager.WIFI_P2P_PEERS_CHANGED_ACTION);\r\n\r\n        // Indicates the state of Wi-Fi Direct connectivity has changed.\r\n        intentFilter.addAction(WifiP2pManager.WIFI_P2P_CONNECTION_CHANGED_ACTION);\r\n\r\n        // Indicates this device's details have changed.\r\n        intentFilter.addAction(WifiP2pManager.WIFI_P2P_THIS_DEVICE_CHANGED_ACTION);\r\n\r\n        manager = (WifiP2pManager) getSystemService(Context.WIFI_P2P_SERVICE);\r\n        channel = manager.initialize(this, getMainLooper(), null);\r\n    }\r\n\r\n    /*@Override\r\n    public void onRequestPermissionsResult(int requestCode, String[] permissions,\r\n                                           int[] grantResults) {\r\n        switch (requestCode) {\r\n            case PERMISSION_REQUEST_CODE:\r\n                // If request is cancelled, the result arrays are empty.\r\n                if (grantResults.length > 0 &&\r\n                        grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\n                    // Permission is granted. Continue the action or workflow\r\n                    // in your app.\r\n                }  else {\r\n                    // Explain to the user that the feature is unavailable because\r\n                    // the feature requires a permission that the user has denied.\r\n                    // At the same time, respect the user's decision. Don't link to\r\n                    // system settings in an effort to convince the user to change\r\n                    // their decision.\r\n                }\r\n\r\n                return;\r\n        }\r\n        // Other 'case' lines to check for other\r\n        // permissions this app might request.\r\n    }*/\r\n\r\n\r\n    @Override\r\n    public void onWindowFocusChanged(boolean hasFocus) {\r\n        super.onWindowFocusChanged(hasFocus);\r\n        if (currentApiVersion >= Build.VERSION_CODES.KITKAT) {\r\n            getWindow().getDecorView().setSystemUiVisibility(\r\n                    View.SYSTEM_UI_FLAG_LAYOUT_STABLE\r\n                            | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION\r\n                            | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\r\n                            | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION\r\n                            | View.SYSTEM_UI_FLAG_FULLSCREEN\r\n                            | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void onDestroy() {\r\n        super.onDestroy();\r\n\r\n        saveSharedPreferences();\r\n\r\n        if (endDialog != null)\r\n            endDialog.dismiss();\r\n\r\n        gameDone = true;\r\n        if(musicPlayer != null) musicPlayer.mute();\r\n\r\n        /*try {\r\n            otherPlayerThread.join();\r\n        } catch (InterruptedException e) {\r\n            //e.printStackTrace();\r\n        }\r\n        otherPlayerThread = null;*/\r\n\r\n        try {\r\n            if(tableViewRefreshingThread!= null)\r\n                tableViewRefreshingThread.join();\r\n        } catch (InterruptedException e) {\r\n            //e.printStackTrace();\r\n        }\r\n        tableViewRefreshingThread = null;\r\n\r\n\r\n        try {\r\n            if(musicPlayerThread!= null)\r\n                musicPlayerThread.join();\r\n        } catch (InterruptedException e) {\r\n            //e.printStackTrace();\r\n        }\r\n        musicPlayerThread = null;\r\n\r\n        try {\r\n            unregisterReceiver(receiver);\r\n        } catch (IllegalArgumentException e) {\r\n\r\n        }\r\n\r\n        manager.clearLocalServices(channel, new WifiP2pManager.ActionListener() {\r\n            @Override\r\n            public void onSuccess() {\r\n                Log.d(\"granglawifi\", \"local servoces cleared\");\r\n            }\r\n            @Override\r\n            public void onFailure(int i) {\r\n\r\n            }\r\n        });\r\n\r\n        //acceptThread.cancel();\r\n        try {\r\n            if (granglaSocket != null)\r\n                granglaSocket.close();\r\n        } catch (IOException e) {\r\n            //e.printStackTrace();\r\n        }\r\n\r\n        if(bluetoothService != null)\r\n            bluetoothService.cancel();\r\n    }\r\n\r\n    public void onFieldSelected(int x,int y) {\r\n        if(!gameStarted) return;\r\n        synchronized (table) {\r\n            if(allowCircle) {\r\n                if(!server){\r\n                    if(this.table.get(x, y) == State.empty) {\r\n                        bluetoothService.sendMove(x, y);\r\n                    }\r\n                } else {\r\n                    if (this.table.publicPut(State.circle, x, y)) {\r\n                        lastMoveO = new Coordinates(x, y);\r\n                        waitingMomentCircle = System.currentTimeMillis() + waitingTimeCircle;\r\n                        startCircleTime = true;\r\n                        allowCircle = false;\r\n                        movesO.add(0, lastMoveO);\r\n\r\n                        if (!server) {\r\n                            bluetoothService.sendMove(x, y);\r\n                        } else {\r\n                            bluetoothService.sendTableState();\r\n                            stateSent = 1;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n\r\n    class UIPut implements Runnable {\r\n\r\n        private void updateTableViewFields(){\r\n\r\n            for (int i = 0; i < TableConfig.TABLE_SIZE; i++) {\r\n                for (int j = 0; j < TableConfig.TABLE_SIZE; j++) {\r\n                    if (table.publicGet(i, j) == State.circle) {\r\n                        if ((movesO.size() >= (TableConfig.MAX_PIECES-1)) &&\r\n                                (new Coordinates(i,j).equals(movesO.get(TableConfig.MAX_PIECES - 2)))) {\r\n                            tableView.changePinColor(i, j, player1Image, 0.32f);\r\n                        }\r\n                        else if ((movesO.size() >= (TableConfig.MAX_PIECES-2)) &&\r\n                                (new Coordinates(i,j).equals(movesO.get(TableConfig.MAX_PIECES - 3)))) {\r\n                            tableView.changePinColor(i, j, player1Image, 0.6f);\r\n                        }\r\n                        else {\r\n                            tableView.changePinColor(i, j, player1Image, 1f);\r\n                        }\r\n                    }\r\n                    if (table.publicGet(i, j) == State.cross){\r\n                        if ((movesX.size() >= (TableConfig.MAX_PIECES-1)) &&\r\n                                (new Coordinates(i,j).equals(movesX.get(TableConfig.MAX_PIECES - 2)))) {\r\n                            tableView.changePinColor(i, j, player2Image, 0.32f);\r\n                        }\r\n                        else if ((movesX.size() >= (TableConfig.MAX_PIECES-2)) &&\r\n                                (new Coordinates(i,j)).equals(movesX.get(TableConfig.MAX_PIECES - 3))) {\r\n                            tableView.changePinColor(i, j, player2Image, 0.6f);\r\n                        }\r\n                        else {\r\n                            tableView.changePinColor(i, j, player2Image, 1f);\r\n                        }\r\n\r\n                    }\r\n                    if (table.publicGet(i, j) == State.empty) {\r\n                        tableView.changePinColor(i, j, R.drawable.pin41, 1f, spaceHeading[normalizeIndex(i)][normalizeIndex(j)]);\r\n\r\n                        movesO.remove(new Coordinates(i, j));\r\n                        movesX.remove(new Coordinates(i, j));\r\n                    }\r\n\r\n                    if (table.publicGet(i, j) == State.rock) {\r\n                        tableView.changePinColor(i, j, R.drawable.pin20, 1f);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        private void checkIfScored(){\r\n            if(server)\r\n                spaceHeading = new int[6][6];\r\n\r\n            if ((lastMoveO != null) && (table != null) && (movesO != null)) {\r\n                double r = 0;\r\n                r = table.getScore(lastMoveO.x, lastMoveO.y, lastEventTime, spaceHeading);\r\n                if(server)\r\n                    result += r * TableConfig.RESULT_FACTOR;\r\n                if (r == 0){\r\n                    if(movesO.size() >= TableConfig.MAX_PIECES) {\r\n                        Coordinates c = (Coordinates) movesO.remove(TableConfig.MAX_PIECES - 1);\r\n                        table.publicEmpty(c.x, c.y);\r\n                        tableView.removeImediately(c.x, c.y);\r\n                        spaceHeading[c.x][c.y] = -2;\r\n                        if(server)\r\n                            result -= 3 * TableConfig.RESULT_FACTOR;\r\n                    }\r\n                } else {\r\n                    lastEventTime = System.currentTimeMillis();\r\n                    turnSomeInstrumentOn();\r\n                }\r\n                lastMoveO = null;\r\n            }\r\n\r\n            if ((lastMoveX != null) && (table != null) && (movesX != null)) {\r\n                double r = 0;\r\n                r = table.getScore(lastMoveX.x, lastMoveX.y, lastEventTime, spaceHeading);\r\n                if(server)\r\n                    result -= r * TableConfig.RESULT_FACTOR;\r\n                if (r == 0){\r\n                    if(movesX.size() >= TableConfig.MAX_PIECES) {\r\n                        Coordinates c = (Coordinates) movesX.remove(TableConfig.MAX_PIECES - 1);\r\n                        table.publicEmpty(c.x, c.y);\r\n                        tableView.removeImediately(c.x, c.y);\r\n                        spaceHeading[c.x][c.y] = -2;\r\n                        if(server)\r\n                            result += 3 * TableConfig.RESULT_FACTOR;\r\n                    }\r\n                } else {\r\n                    lastEventTime = System.currentTimeMillis();\r\n                    turnSomeInstrumentOn();\r\n                }\r\n                lastMoveX = null;\r\n            }\r\n            /*if(!server)\r\n                spaceHeading = new int[6][6];*/\r\n        }\r\n\r\n        private void checkIfGameEnded() {\r\n            long gameEndTime = System.currentTimeMillis() - gameStartTime;\r\n\r\n            if ((server && ((result <= 0) ||\r\n                    (result >= 100))) ||\r\n                    gameEndSignal) {\r\n\r\n                if(server){\r\n                    bluetoothService.sendWin();\r\n                }\r\n\r\n                gameDone = true;\r\n\r\n                onlyTrumpetEnd();\r\n\r\n                updateTableViewFields();\r\n                checkIfScored();\r\n                refreshResultBar();\r\n\r\n                //musicPlayer.setMeasure(2);\r\n                musicPlayer.setEndSong();\r\n\r\n                endDialog = new EndDialog(BluetoothPlayerGamePlayActivity.this, R.style.EndDialog);\r\n                endDialog.getWindow().requestFeature(Window.FEATURE_NO_TITLE);\r\n                endDialog.getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));\r\n                endDialog.setCanceledOnTouchOutside(false);\r\n\r\n                endDialog.getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);\r\n\r\n                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\r\n                    endDialog.getWindow().getDecorView().setSystemUiVisibility(\r\n                            View.SYSTEM_UI_FLAG_LAYOUT_STABLE\r\n                                    | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION\r\n                                    | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\r\n                                    | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION\r\n                                    | View.SYSTEM_UI_FLAG_FULLSCREEN\r\n                                    | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);\r\n                }\r\n\r\n                if (result <= 50) {\r\n                    if (player2Image == R.drawable.pin39) {\r\n                        endDialog.setContentView(getLayoutInflater().inflate(R.layout.end_dialog_oko, null));\r\n                    }\r\n                    if (player2Image == R.drawable.pin40) {\r\n                        endDialog.setContentView(getLayoutInflater().inflate(R.layout.end_dialog_gumb, null));\r\n                    }\r\n                    if (player2Image == R.drawable.pin42) {\r\n                        endDialog.setContentView(getLayoutInflater().inflate(R.layout.end_dialog_djetelina, null));\r\n                    }\r\n                    if (player2Image == R.drawable.pin43) {\r\n                        endDialog.setContentView(getLayoutInflater().inflate(R.layout.end_dialog_zvijezda, null));\r\n                    }\r\n                } else {\r\n                    if (player1Image == R.drawable.pin39) {\r\n                        endDialog.setContentView(getLayoutInflater().inflate(R.layout.end_dialog_oko, null));\r\n                    }\r\n                    if (player1Image == R.drawable.pin40) {\r\n                        endDialog.setContentView(getLayoutInflater().inflate(R.layout.end_dialog_gumb, null));\r\n                    }\r\n                    if (player1Image == R.drawable.pin42) {\r\n                        endDialog.setContentView(getLayoutInflater().inflate(R.layout.end_dialog_djetelina, null));\r\n                    }\r\n                    if (player1Image == R.drawable.pin43) {\r\n                        endDialog.setContentView(getLayoutInflater().inflate(R.layout.end_dialog_zvijezda, null));\r\n                    }\r\n                }\r\n\r\n                Handler handlerAnimation1 = new Handler();\r\n                handlerAnimation1.postDelayed(new Runnable() {\r\n                    public void run() {\r\n                        oneMoreInTheEnd();\r\n                        endDialog.show();\r\n                    }\r\n                }, 1000);\r\n\r\n                Handler handlerAnimation2 = new Handler();\r\n                handlerAnimation2.postDelayed(new Runnable() {\r\n                    public void run() {\r\n                        endDialog.dismiss();\r\n\r\n                        if (result >= 0) {\r\n                            win = true;\r\n                        } else {\r\n                            lose = true;\r\n                        }\r\n\r\n                        if((levelString == null) || !getScoresTask.isHighScore()){\r\n                            finish();\r\n                        }\r\n                    }\r\n                }, 7000);\r\n\r\n                Handler handlerIsHighScore = new Handler();\r\n                handlerIsHighScore.postDelayed(new Runnable() {\r\n                    public void run() {\r\n                        if(levelString == null) return;\r\n                        getScoresTask = new HighScoresHelper.HttpGetScoresAsyncTask(levelString, (long)(Math.signum(result))*gameEndTime);\r\n                        getScoresTask.execute(\"\");\r\n                    }}, 0);\r\n\r\n                Handler handlerSendHighScore = new Handler();\r\n                handlerSendHighScore.postDelayed(new Runnable() {\r\n                    public void run() {\r\n                        if(levelString == null) return;\r\n                        if(!getScoresTask.isHighScore()){\r\n                            return;\r\n                        }\r\n                        AlertDialog.Builder builder = new AlertDialog.Builder(BluetoothPlayerGamePlayActivity.this);\r\n                        builder.setTitle(\"High Score\");\r\n                        builder.setInverseBackgroundForced(true);\r\n                        builder.setMessage(\"Please enter your name:\");\r\n                        final EditText input = new EditText(BluetoothPlayerGamePlayActivity.this);\r\n                        input.setInputType(InputType.TYPE_TEXT_FLAG_CAP_WORDS);\r\n                        input.setFilters(new InputFilter[] { new InputFilter.LengthFilter(25) });\r\n                        builder.setView(input);\r\n                        builder.setCancelable(false);\r\n                        builder.setPositiveButton(\"OK\", new DialogInterface.OnClickListener() {\r\n                            @Override\r\n                            public void onClick(DialogInterface dialog, int which) {\r\n                                String name = input.getText().toString();\r\n                                new HighScoresHelper.HttpPostScoreAsyncTask(new Score(levelString, (long)(Math.signum(result))*gameEndTime, name)).execute(\"\");\r\n                                finish();\r\n                            }\r\n                        });\r\n                        builder.setNegativeButton(\"Cancel\", new DialogInterface.OnClickListener() {\r\n                            @Override\r\n                            public void onClick(DialogInterface dialog, int which) {\r\n                                dialog.cancel();\r\n                                finish();\r\n                            }\r\n                        });\r\n\r\n                        builder.show();\r\n\r\n                    }\r\n\r\n                }, 3000);\r\n            }\r\n        }\r\n\r\n        public void refreshResultBar(){\r\n            long millis = (System.currentTimeMillis() - gameStartTime);\r\n            textClock.setText(String.format(\"%d:%02d\",\r\n                    TimeUnit.MILLISECONDS.toMinutes(millis),\r\n                    TimeUnit.MILLISECONDS.toSeconds(millis) -\r\n                            TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(millis))));\r\n            if(result<50){\r\n                textClock.setTextColor(ColorUtils.blendARGB(Color.WHITE, player2Color, (float)(50-result)/50));\r\n            } else {\r\n                textClock.setTextColor(ColorUtils.blendARGB(Color.WHITE, player1Color, (float) (result - 50) / 50));\r\n            }\r\n\r\n            if(!firstTimeAnimatedProgress)\r\n                if (gameDone){\r\n                    resultBar.clearAnimation();\r\n                    if(result > 50) {\r\n                        animResult = new ResultBarAnimation(resultBar2, resultBar, (float) 100);\r\n                    } else {\r\n                        animResult = new ResultBarAnimation(resultBar2, resultBar, (float) 0);\r\n                    }\r\n                    animResult.setDuration(100);\r\n                    resultBar.startAnimation(animResult);\r\n                } else {\r\n                    if ((animResult.hasEnded()) && (resultBar2.getProgress() != (int) result)) {\r\n                        animResult = new ResultBarAnimation(resultBar2, resultBar, (float) result);\r\n                        animResult.setDuration(400);\r\n                        resultBar.startAnimation(animResult);\r\n                    }\r\n                }\r\n\r\n            if(firstTimeAnimatedProgress) {\r\n                animResult = new ResultBarAnimation(resultBar, resultBar2, (float) result);\r\n                animResult.setDuration(100);\r\n                resultBar.startAnimation(animResult);\r\n\r\n                firstTimeAnimatedProgress = false;\r\n            }\r\n        }\r\n\r\n        private void refreshWaitingTimeValues(){\r\n            if(!(currentTime < waitingMomentCircle)){\r\n                allowCircle = true;\r\n            }\r\n\r\n            if(!(currentTime < waitingMomentCross)){\r\n                allowCross = true;\r\n            }\r\n\r\n            if(startCircleTime) {\r\n                TimerAnimation anim = new TimerAnimation(circleBar,\r\n                        player1Color & 0xC5FFFFFF,\r\n                        player1ColorDesaturated & 0x80FFFFFF);\r\n                anim.setDuration(waitingMomentCircle - currentTime);\r\n                circleBar.startAnimation(anim);\r\n                startCircleTime = false;\r\n            }\r\n\r\n            if(startCrossTime) {\r\n                TimerAnimation anim2 = new TimerAnimation(crossBar,\r\n                        player2Color & 0xC5FFFFFF,\r\n                        player2ColorDesaturated & 0x80FFFFFF);\r\n                anim2.setDuration(waitingMomentCross - currentTime);\r\n                crossBar.startAnimation(anim2);\r\n                startCrossTime = false;\r\n            }\r\n\r\n            if(server) {\r\n                waitingTimeCircle = TableConfig.MAX_WAITING_TIME - (TableConfig.MAX_WAITING_TIME - TableConfig.MIN_WAITING_TIME) / 50 * Math.abs(50 - (int) result);\r\n                waitingTimeCircle -= TableConfig.MIN_WAITING_TIME;\r\n                waitingTimeCircle = (long) ((double) waitingTimeCircle / (1 + (double) (currentTime - gameStartTime) / (double) TableConfig.HALF_LIFE));\r\n                waitingTimeCircle += TableConfig.MIN_WAITING_TIME;\r\n\r\n                waitingTimeCross = TableConfig.MAX_WAITING_TIME - (TableConfig.MAX_WAITING_TIME - TableConfig.MIN_WAITING_TIME) / 50 * Math.abs(50 - (int) result);\r\n                waitingTimeCross -= TableConfig.MIN_WAITING_TIME;\r\n                waitingTimeCross = (long) ((double) waitingTimeCross / (1 + (double) (currentTime - gameStartTime) / (double) TableConfig.HALF_LIFE));\r\n                waitingTimeCross += TableConfig.MIN_WAITING_TIME;\r\n            }\r\n        }\r\n\r\n        //music measure and speed are changed according to waitingTime, that is game speed\r\n        private void refreshMusicPlayerValues(){\r\n            if(!musicPlayer.isEndSong()) {\r\n                musicPlayer.setNoteDuration((long)(TableConfig.NOTE_DURATION_FACTOR * waitingTimeCross));\r\n            }\r\n        }\r\n\r\n\r\n        public void run() {\r\n            synchronized(BluetoothPlayerGamePlayActivity.this) {\r\n                currentTime = System.currentTimeMillis();\r\n\r\n                checkIfGameEnded();\r\n                updateTableViewFields();\r\n                checkIfScored();\r\n                refreshResultBar();\r\n                refreshWaitingTimeValues();\r\n                refreshMusicPlayerValues();\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    private class OtherPlayer implements Runnable {\r\n        private void thinkForAWhile(){\r\n            try {\r\n                double a = Math.random();\r\n                a*= (0.7 + 0.42/50 * Math.abs(50 - (int)result));\r\n                Thread.sleep(waitingTimeCross +\r\n                        (long)(a*( (TableConfig.THINKING_TIME_MIN_LEVEL - TableConfig.THINKING_TIME_MAX_LEVEL) * (101-level) / 100 + TableConfig.THINKING_TIME_MAX_LEVEL)));\r\n            } catch (InterruptedException e) {\r\n                //e.printStackTrace();\r\n            }\r\n\r\n            if ((currentTime - lastEventTime) < 90){\r\n                try {\r\n                    Thread.sleep(90);\r\n                } catch (InterruptedException e) {\r\n                    //e.printStackTrace();\r\n                }\r\n            }\r\n        }\r\n\r\n        public void run() {\r\n            while(!gameDone){\r\n                thinkForAWhile();\r\n\r\n                if(gamePaused) continue;\r\n\r\n                synchronized (table) {\r\n                    c = table.makeAMove(State.cross);\r\n                    lastMoveX = new Coordinates(c.x, c.y);\r\n                    waitingMomentCross = System.currentTimeMillis() + waitingTimeCross;\r\n                    startCrossTime = true;\r\n                    allowCross = false;\r\n                    movesX.add(0, lastMoveX);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/boardgame/miljac/grangla/BluetoothPlayerGamePlayActivity.java b/app/src/main/java/com/boardgame/miljac/grangla/BluetoothPlayerGamePlayActivity.java
--- a/app/src/main/java/com/boardgame/miljac/grangla/BluetoothPlayerGamePlayActivity.java	(revision 569bdf404dfd6e1cb16ad50b7c80667089cb54fe)
+++ b/app/src/main/java/com/boardgame/miljac/grangla/BluetoothPlayerGamePlayActivity.java	(date 1675265564332)
@@ -8,6 +8,8 @@
 import static com.boardgame.miljac.grangla.music.MusicHelpers.randomAround;
 import static com.boardgame.miljac.grangla.music.MusicHelpers.turnSomeInstrumentOn;
 
+import static java.lang.Thread.sleep;
+
 import android.annotation.SuppressLint;
 import android.bluetooth.BluetoothAdapter;
 import android.bluetooth.BluetoothServerSocket;
@@ -48,6 +50,7 @@
 
 import java.io.IOException;
 import java.io.InputStream;
+import java.io.OutputStream;
 import java.net.InetSocketAddress;
 import java.net.ServerSocket;
 import java.net.Socket;
@@ -99,6 +102,7 @@
     boolean startCircleTime = false;
     boolean startCrossTime = false;
     private String levelString;
+    int retry;
 
     private boolean win = false;
     private boolean lose = false;
@@ -168,6 +172,11 @@
         public void onDnsSdTxtRecordAvailable(String s, Map<String, String> map, WifiP2pDevice wifiP2pDevice) {
             Log.d("granglawifi", "onDnsSdTxtRecordAvailable");
 
+            if(retry == 0){
+                retry = 2;
+                return;
+            }
+
             if(!connected) {
                 Log.d("granglawifi", s);
                 for (Map.Entry<String, String> entry : map.entrySet()) {
@@ -204,6 +213,7 @@
 
                     @Override
                     public void onSuccess() {
+                        retry = 2;
                         Log.d("granglawifi", "connected to " +
                                 wifiP2pDevice.deviceAddress == null ? "" : wifiP2pDevice.deviceAddress);
                             /*manager.clearLocalServices(channel, new WifiP2pManager.ActionListener() {
@@ -233,13 +243,16 @@
                                             try {
                                                 Log.d("granglawifi", "connecting socket as server....");
                                                 ServerSocket serverSocket = new ServerSocket(6000);
+                                                //serverSocket.setSoTimeout(15000);
                                                 Socket socket = serverSocket.accept();
                                                 connected = true;
-                            /*OutputStream outputStream = socket.getOutputStream();
-                            outputStream.write("Hello from Group Owner".getBytes());
-                            outputStream.close();
-                            socket.close();
-                            serverSocket.close();*/
+
+                                                OutputStream outputStream = socket.getOutputStream();
+                                                outputStream.write("Hello from Group Owner".getBytes());
+                                                outputStream.close();
+                                                socket.close();
+                                                serverSocket.close();
+
                                                 Log.d("granglawifi", "connected socket as server");
                                             } catch (IOException e) {
                                                 e.printStackTrace();
@@ -256,14 +269,17 @@
                                                 if(connected) return;
                                                 Log.d("granglawifi", "connecting socket as client..");
                                                 Socket socket = new Socket();
+                                                //socket.setSoTimeout(15000);
                                                 socket.connect((new InetSocketAddress(info.groupOwnerAddress, 6000)));
                                                 connected = true;
                                                 InputStream inputStream = socket.getInputStream();
-                            /*byte[] message = new byte[1024];
-                            int length = inputStream.read(message);
-                            Log.d("Message", new String(message, 0, length));
-                            inputStream.close();
-                            socket.close();*/
+
+                                                byte[] message = new byte[1024];
+                                                int length = inputStream.read(message);
+                                                Log.d("granglawifi", new String(message, 0, length));
+                                                inputStream.close();
+                                                socket.close();
+
                                                 Log.d("granglawifi", "connected socket as client");
 
                                             } catch (IOException e) {
@@ -279,10 +295,18 @@
 
                     @Override
                     public void onFailure(int reason) {
-                        Log.d("granglawifi", " failing to connect to " + wifiP2pDevice.deviceAddress);
+                        Log.d("granglawifi", " failing to connect to " + wifiP2pDevice.deviceAddress + " error: " + reason);
                         connected = false;
+                        retry--;
+                        try {
+                            sleep(1000);
+                        } catch (InterruptedException e) {
+                            e.printStackTrace();
+                        }
+                        onDnsSdTxtRecordAvailable(s, map, wifiP2pDevice);
                     }
                 });
+
             }
 
         }
@@ -301,6 +325,7 @@
                     manager.addLocalService(channel, serviceInfo, new WifiP2pManager.ActionListener() {
                         @Override
                         public void onSuccess() {
+                            retry = 3;
                             manager.setDnsSdResponseListeners(channel, dnsSdResponseListener, dnsSdTxtResponseListener);
                             manager.clearServiceRequests(channel, new WifiP2pManager.ActionListener() {
                                 @Override
@@ -392,6 +417,11 @@
         public void onReceive(Context context, Intent intent) {
             String action = intent.getAction();
             Log.d("granglawifi","action received: " + intent.toString());
+            //Log.d("granglawifi",intent.getExtras().toString());
+            /*for (String key : intent.getExtras().keySet()) {
+                Object value = intent.getExtras().get(key);
+                if (value != null) Log.d("granglawifi", key + ": " + value.toString());
+            }*/
             if (WifiP2pManager.WIFI_P2P_STATE_CHANGED_ACTION.equals(action)) {
                 // Determine if Wi-Fi Direct mode is enabled or not, alert
                 // the Activity.
@@ -1257,7 +1287,7 @@
             try {
                 double a = Math.random();
                 a*= (0.7 + 0.42/50 * Math.abs(50 - (int)result));
-                Thread.sleep(waitingTimeCross +
+                sleep(waitingTimeCross +
                         (long)(a*( (TableConfig.THINKING_TIME_MIN_LEVEL - TableConfig.THINKING_TIME_MAX_LEVEL) * (101-level) / 100 + TableConfig.THINKING_TIME_MAX_LEVEL)));
             } catch (InterruptedException e) {
                 //e.printStackTrace();
@@ -1265,7 +1295,7 @@
 
             if ((currentTime - lastEventTime) < 90){
                 try {
-                    Thread.sleep(90);
+                    sleep(90);
                 } catch (InterruptedException e) {
                     //e.printStackTrace();
                 }
